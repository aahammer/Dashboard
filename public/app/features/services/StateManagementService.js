// Generated by CoffeeScript 1.7.1
(function() {
  define([], function() {
    return function($settings) {
      var StateManagementService;
      StateManagementService = function($rootScope, $settings, DataService) {

        /* Handle wrong URLS */

        /* INIT Application */
        var initApplication, urlParser;
        urlParser = document.createElement('a');
        initApplication = function() {
          var query_item, query_module, query_question;
          query_item = {
            select: 'item',
            rollup: 'count',
            from: 'speciality',
            where: {
              date: Date.parse('2014-05-01')
            },
            into: 'items',
            optional: {
              keepFilter: true
            }
          };
          query_module = {
            select: 'module',
            rollup: 'count',
            from: 'speciality',
            into: 'modules',
            optional: {
              keepFilter: false
            }
          };
          query_question = {
            select: 'question',
            from: 'speciality',
            where: {
              item: 'surgery',
              module: 'organisation'
            },
            into: 'questions',
            optional: {
              keepFilter: false
            }
          };
          DataService.provideData(query_item);
          DataService.provideData(query_module);
          DataService.provideData(query_question);
        };
        initApplication();

        /* RUNTIME */
        $rootScope.$on('$locationChangeSuccess', function(event, now, last) {
          var urlParts;
          urlParser.href = now;
          console.log(now);
          urlParts = /#\/(\w*)\/(\w*)/g.exec(urlParser.hash);
          switch ((urlParts[1] != null ? urlParts[1] : 'error')) {
            case 'selections':
              console.log('selections');
              return;
            case 'items':
              console.log('items');
              return;
            case 'modules':
              console.log('modules');
              return;
            case 'measures':
              console.log('measures');
              return;
            case 'questions':
              console.log('questions');
              return;
            default:
              console.log('error in url part 1');
          }
        });

        /* GLOBAL INTERFACE */
        return {};
      };
      return ['$rootScope', $settings, 'DataService', StateManagementService];
    };
  });

}).call(this);

//# sourceMappingURL=StateManagementService.map
